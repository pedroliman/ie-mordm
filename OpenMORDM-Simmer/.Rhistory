lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
library(OpenMORDM)
lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
data <- borg.optimize(problem = problem, NFE = 1000)
install.packages("gdata")
install.packages("gdata")
data <- borg.optimize(problem = problem, NFE = 1000)
library(OpenMORDM)
lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
data <- borg.optimize(problem = problem, NFE = 1000)
library(rdyncall)
lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
data <- borg.optimize(problem = problem, NFE = 1000)
Sys.getenv()
Sys.getenv()
library(OpenMORDM)
library(rdyncall)
lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
data <- borg.optimize(problem = problem, NFE = 1000)
data <- borg.optimize(problem = problem, NFE = 1000)
data <- borg.optimize(problem = problem, NFE = 1000)
library(OpenMORDM)
lake.eval <- function(decisions, samples=100, days=100, b=0.42, q=2, mean=0.02,
stdev=0.001, delta=0.98, alpha=0.4, beta=0.08,
reliability.threshold=0.9, inertia.threshold=-0.02) {
pcrit <- uniroot(function(y) y^q/(1+y^q) - b*y, c(0.01, 1.5))$root
X <- rep(0, days)
objs <- rep(0, 4)
for (i in 1:samples) {
X[1] <- 0
natural.pollution <- rlnorm(days,
log(mean^2/sqrt(stdev^2 + mean^2)),
sqrt(log(1+stdev^2/mean^2)))
for (t in 2:days) {
X[t] <- (1-b)*X[t-1] + X[t-1]^q/(1+X[t-1]^q) + decisions[t] + natural.pollution[t]
}
objs[1] <- objs[1] + max(X) / samples
objs[4] <- objs[4] - sum(X < pcrit) / (samples*days)
}
objs[2] <- -sum(alpha*decisions*delta^(1:days))
objs[3] <- -sum(diff(decisions) > inertia.threshold) / (days-1)
list(objectives=objs, constraints=max(reliability.threshold+objs[4], 0))
}
nvars <- 100
nobjs <- 4
nconstrs <- 1
problem <- define.problem(lake.eval, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 0.1), nvars), nrow=2),
names=c("Phosphorus in Lake", "Economic Benefit", "Inertia", "Reliability"),
maximize=c("Economic Benefit", "Inertia", "Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
data <- borg.optimize(problem = problem, NFE = 1000)
?borg.optimize
borglib <- dynbind(c("borg.dll", "libborg.so", "borg"),"
BORG_Debug_on()v;
BORG_Debug_off()v;
BORG_Debug_set_name(Z)v;
BORG_Problem_create(iiip)p;
BORG_Problem_destroy(p)v;
BORG_Problem_set_epsilon(pid)v;
BORG_Problem_set_name(piZ)v;
BORG_Problem_set_epsilons(p*)v;
BORG_Problem_set_bounds(pidd)v;
BORG_Problem_number_of_variables(p)i;
BORG_Problem_number_of_objectives(p)i;
BORG_Problem_number_of_constraints(p)i;
BORG_Solution_create(p)p;
BORG_Solution_destroy(p)v;
BORG_Solution_clone(p)p;
BORG_Solution_get_variable(pi)d;
BORG_Solution_get_objective(pi)d;
BORG_Solution_get_constraint(pi)d;
BORG_Solution_set_variables(pp)v;
BORG_Solution_get_problem(p)p;
BORG_Solution_evaluate(p)v;
BORG_Solution_print(pp)v;
BORG_Solution_initialize(p)v;
BORG_Solution_violates_constraints(p)i;
BORG_Dominance_pareto(pp)i;
BORG_Dominance_epsilon(pp)i;
BORG_Dominance_constraints(pp)i;
BORG_Dominance_compound(pppp)i;
BORG_Random_seed(J)v;
BORG_Random_uniform(dd)d;
BORG_Random_int(i)i;
BORG_Random_gaussian(dd)d;
BORG_Operator_create(Ziiip)p;
BORG_Operator_destroy(p)v;
BORG_Operator_get_probability(p)d;
BORG_Operator_set_parameter(pid)v;
BORG_Operator_set_parameters(pp)v;
BORG_Operator_get_number_of_offspring(p)i;
BORG_Operator_get_number_of_parents(p)i;
BORG_Operator_set_mutation(pp)v;
BORG_Operator_apply(ppp)v;
BORG_Operator_UM(ppp)v;
BORG_Operator_SBX(ppp)v;
BORG_Operator_PM(ppp)v;
BORG_Operator_DE(ppp)v;
BORG_Operator_SPX(ppp)v;
BORG_Operator_PCX(ppp)v;
BORG_Operator_UNDX(ppp)v;
BORG_Population_create(i)p;
BORG_Population_destroy(p)v;
BORG_Population_add(pp)v;
BORG_Population_reset(pi)v;
BORG_Population_tournament(pi)v;
BORG_Population_select(pipi)v;
BORG_Archive_create()p;
BORG_Archive_clone(p)p;
BORG_Archive_destroy(p)v;
BORG_Archive_add(pp)v;
BORG_Archive_get_size(p)i;
BORG_Archive_get(pi)p;
BORG_Archive_get_improvements(p)i;
BORG_Archive_select(p)p;
BORG_Archive_print(pp)v;
BORG_Archive_append(pp)v;
BORG_Algorithm_create(pi)p;
BORG_Algorithm_destroy(p)v;
BORG_Algorithm_validate(p)v;
BORG_Algorithm_get_number_restarts(p)i;
BORG_Algorithm_get_number_improvements(p)i;
BORG_Algorithm_set_window_size(pi)v;
BORG_Algorithm_set_initial_population_size(pi)v;
BORG_Algorithm_set_minimum_population_size(pi)v;
BORG_Algorithm_set_maximum_population_size(pi)v;
BORG_Algorithm_set_population_ratio(pd)v;
BORG_Algorithm_set_selection_ratio(pd)v;
BORG_Algorithm_set_restart_mode(pi)v;
BORG_Algorithm_set_probability_mode(pi)v;
BORG_Algorithm_get_mutation_index(p)i;
BORG_Algorithm_set_max_mutation_index(pi)v;
BORG_Algorithm_set_operator(pip)v;
BORG_Algorithm_update(p)v;
BORG_Algorithm_select(p)i;
BORG_Algorithm_shuffle(ip)v;
BORG_Algorithm_restart(p)v;
BORG_Algorithm_check(p)i;
BORG_Algorithm_step(p)v;
BORG_Algorithm_get_nfe(p)i;
BORG_Algorithm_get_population_size(p)i;
BORG_Algorithm_get_archive_size(p)i;
BORG_Algorithm_get_result(p)p;
BORG_Algorithm_run(pi)p;
")
library(rdyncall)
borglib <- dynbind(c("borg.dll", "libborg.so", "borg"),"
BORG_Debug_on()v;
BORG_Debug_off()v;
BORG_Debug_set_name(Z)v;
BORG_Problem_create(iiip)p;
BORG_Problem_destroy(p)v;
BORG_Problem_set_epsilon(pid)v;
BORG_Problem_set_name(piZ)v;
BORG_Problem_set_epsilons(p*)v;
BORG_Problem_set_bounds(pidd)v;
BORG_Problem_number_of_variables(p)i;
BORG_Problem_number_of_objectives(p)i;
BORG_Problem_number_of_constraints(p)i;
BORG_Solution_create(p)p;
BORG_Solution_destroy(p)v;
BORG_Solution_clone(p)p;
BORG_Solution_get_variable(pi)d;
BORG_Solution_get_objective(pi)d;
BORG_Solution_get_constraint(pi)d;
BORG_Solution_set_variables(pp)v;
BORG_Solution_get_problem(p)p;
BORG_Solution_evaluate(p)v;
BORG_Solution_print(pp)v;
BORG_Solution_initialize(p)v;
BORG_Solution_violates_constraints(p)i;
BORG_Dominance_pareto(pp)i;
BORG_Dominance_epsilon(pp)i;
BORG_Dominance_constraints(pp)i;
BORG_Dominance_compound(pppp)i;
BORG_Random_seed(J)v;
BORG_Random_uniform(dd)d;
BORG_Random_int(i)i;
BORG_Random_gaussian(dd)d;
BORG_Operator_create(Ziiip)p;
BORG_Operator_destroy(p)v;
BORG_Operator_get_probability(p)d;
BORG_Operator_set_parameter(pid)v;
BORG_Operator_set_parameters(pp)v;
BORG_Operator_get_number_of_offspring(p)i;
BORG_Operator_get_number_of_parents(p)i;
BORG_Operator_set_mutation(pp)v;
BORG_Operator_apply(ppp)v;
BORG_Operator_UM(ppp)v;
BORG_Operator_SBX(ppp)v;
BORG_Operator_PM(ppp)v;
BORG_Operator_DE(ppp)v;
BORG_Operator_SPX(ppp)v;
BORG_Operator_PCX(ppp)v;
BORG_Operator_UNDX(ppp)v;
BORG_Population_create(i)p;
BORG_Population_destroy(p)v;
BORG_Population_add(pp)v;
BORG_Population_reset(pi)v;
BORG_Population_tournament(pi)v;
BORG_Population_select(pipi)v;
BORG_Archive_create()p;
BORG_Archive_clone(p)p;
BORG_Archive_destroy(p)v;
BORG_Archive_add(pp)v;
BORG_Archive_get_size(p)i;
BORG_Archive_get(pi)p;
BORG_Archive_get_improvements(p)i;
BORG_Archive_select(p)p;
BORG_Archive_print(pp)v;
BORG_Archive_append(pp)v;
BORG_Algorithm_create(pi)p;
BORG_Algorithm_destroy(p)v;
BORG_Algorithm_validate(p)v;
BORG_Algorithm_get_number_restarts(p)i;
BORG_Algorithm_get_number_improvements(p)i;
BORG_Algorithm_set_window_size(pi)v;
BORG_Algorithm_set_initial_population_size(pi)v;
BORG_Algorithm_set_minimum_population_size(pi)v;
BORG_Algorithm_set_maximum_population_size(pi)v;
BORG_Algorithm_set_population_ratio(pd)v;
BORG_Algorithm_set_selection_ratio(pd)v;
BORG_Algorithm_set_restart_mode(pi)v;
BORG_Algorithm_set_probability_mode(pi)v;
BORG_Algorithm_get_mutation_index(p)i;
BORG_Algorithm_set_max_mutation_index(pi)v;
BORG_Algorithm_set_operator(pip)v;
BORG_Algorithm_update(p)v;
BORG_Algorithm_select(p)i;
BORG_Algorithm_shuffle(ip)v;
BORG_Algorithm_restart(p)v;
BORG_Algorithm_check(p)i;
BORG_Algorithm_step(p)v;
BORG_Algorithm_get_nfe(p)i;
BORG_Algorithm_get_population_size(p)i;
BORG_Algorithm_get_archive_size(p)i;
BORG_Algorithm_get_result(p)p;
BORG_Algorithm_run(pi)p;
")
dynbind("borg.dll")
dynbind("borg.dll")
testlib = dynbind("twain_32.dll")
install.packages("rdyncall")
library(rdyncall)
testlib = dynbind("twain_32.dll")
borglib <- dynbind(c("borg.dll", "libborg.so", "borg"),"
BORG_Debug_on()v;
BORG_Debug_off()v;
BORG_Debug_set_name(Z)v;
BORG_Problem_create(iiip)p;
BORG_Problem_destroy(p)v;
BORG_Problem_set_epsilon(pid)v;
BORG_Problem_set_name(piZ)v;
BORG_Problem_set_epsilons(p*)v;
BORG_Problem_set_bounds(pidd)v;
BORG_Problem_number_of_variables(p)i;
BORG_Problem_number_of_objectives(p)i;
BORG_Problem_number_of_constraints(p)i;
BORG_Solution_create(p)p;
BORG_Solution_destroy(p)v;
BORG_Solution_clone(p)p;
BORG_Solution_get_variable(pi)d;
BORG_Solution_get_objective(pi)d;
BORG_Solution_get_constraint(pi)d;
BORG_Solution_set_variables(pp)v;
BORG_Solution_get_problem(p)p;
BORG_Solution_evaluate(p)v;
BORG_Solution_print(pp)v;
BORG_Solution_initialize(p)v;
BORG_Solution_violates_constraints(p)i;
BORG_Dominance_pareto(pp)i;
BORG_Dominance_epsilon(pp)i;
BORG_Dominance_constraints(pp)i;
BORG_Dominance_compound(pppp)i;
BORG_Random_seed(J)v;
BORG_Random_uniform(dd)d;
BORG_Random_int(i)i;
BORG_Random_gaussian(dd)d;
BORG_Operator_create(Ziiip)p;
BORG_Operator_destroy(p)v;
BORG_Operator_get_probability(p)d;
BORG_Operator_set_parameter(pid)v;
BORG_Operator_set_parameters(pp)v;
BORG_Operator_get_number_of_offspring(p)i;
BORG_Operator_get_number_of_parents(p)i;
BORG_Operator_set_mutation(pp)v;
BORG_Operator_apply(ppp)v;
BORG_Operator_UM(ppp)v;
BORG_Operator_SBX(ppp)v;
BORG_Operator_PM(ppp)v;
BORG_Operator_DE(ppp)v;
BORG_Operator_SPX(ppp)v;
BORG_Operator_PCX(ppp)v;
BORG_Operator_UNDX(ppp)v;
BORG_Population_create(i)p;
BORG_Population_destroy(p)v;
BORG_Population_add(pp)v;
BORG_Population_reset(pi)v;
BORG_Population_tournament(pi)v;
BORG_Population_select(pipi)v;
BORG_Archive_create()p;
BORG_Archive_clone(p)p;
BORG_Archive_destroy(p)v;
BORG_Archive_add(pp)v;
BORG_Archive_get_size(p)i;
BORG_Archive_get(pi)p;
BORG_Archive_get_improvements(p)i;
BORG_Archive_select(p)p;
BORG_Archive_print(pp)v;
BORG_Archive_append(pp)v;
BORG_Algorithm_create(pi)p;
BORG_Algorithm_destroy(p)v;
BORG_Algorithm_validate(p)v;
BORG_Algorithm_get_number_restarts(p)i;
BORG_Algorithm_get_number_improvements(p)i;
BORG_Algorithm_set_window_size(pi)v;
BORG_Algorithm_set_initial_population_size(pi)v;
BORG_Algorithm_set_minimum_population_size(pi)v;
BORG_Algorithm_set_maximum_population_size(pi)v;
BORG_Algorithm_set_population_ratio(pd)v;
BORG_Algorithm_set_selection_ratio(pd)v;
BORG_Algorithm_set_restart_mode(pi)v;
BORG_Algorithm_set_probability_mode(pi)v;
BORG_Algorithm_get_mutation_index(p)i;
BORG_Algorithm_set_max_mutation_index(pi)v;
BORG_Algorithm_set_operator(pip)v;
BORG_Algorithm_update(p)v;
BORG_Algorithm_select(p)i;
BORG_Algorithm_shuffle(ip)v;
BORG_Algorithm_restart(p)v;
BORG_Algorithm_check(p)i;
BORG_Algorithm_step(p)v;
BORG_Algorithm_get_nfe(p)i;
BORG_Algorithm_get_population_size(p)i;
BORG_Algorithm_get_archive_size(p)i;
BORG_Algorithm_get_result(p)p;
BORG_Algorithm_run(pi)p;
")
?'rdyncall-demos
''
''
?'rdyncall-demos'
libh <- dynfind("twain_32.dll")
libh
dynfind("twain_32.dll")
libh <- dynfind("twain_32.DLL")
libh
libh <- dynfind(libnames = c("borg.dll", "borg"))
libh
.Platform$OS.type == "windows"
.dynload(paste("lib",name,sep=""),...)
function(name, ...) {
function(name, ...) {
handle <- .dynload(paste("lib",name,sep=""),...)
if (!is.null(handle)) return(handle)
.dynload(name,...)
